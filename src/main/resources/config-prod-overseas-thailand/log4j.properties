#定义根日志级别和输出端(定义了两个输出端)
log4j.rootLogger=info,InfoLog,ErrorLog

#定时第二个输出端，输出到文件,该文件最大空间为1000KB，超过1000KB后自动备份，生成新文件
log4j.appender.InfoLog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.InfoLog.Threshold = INFO
log4j.appender.InfoLog.BufferedIO = false
log4j.appender.InfoLog.Encoding = UTF-8
log4j.appender.InfoLog.file=/u01/sh/socket-gsm-admin-log/info/info.log
log4j.appender.InfoLog.layout=org.apache.log4j.PatternLayout
log4j.appender.InfoLog.DatePattern='.'yyyy-MM-dd
log4j.appender.InfoLog.layout.conversionPattern=%-d{yyyy-MM-dd HH:mm:ss, SSS}} [ %t:%r ] - [ %p ] %m%n

log4j.appender.ErrorLog = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ErrorLog.Threshold = ERROR
log4j.appender.ErrorLog.Append = true
log4j.appender.ErrorLog.BufferedIO = false
log4j.appender.ErrorLog.File = /u01/sh/socket-gsm-admin-log/error/error.log
log4j.appender.ErrorLog.Encoding = UTF-8
log4j.appender.ErrorLog.layout = org.apache.log4j.PatternLayout
log4j.appender.ErrorLog.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss, SSS}} [ %t:%r ] - [ %p ] %m%n


#定义具体某个包下的日志输出级别
#log4j.logger.com.orclight.rbac=INFO,InfoLog,Console
#log4j.logger.com.orclight.rbac.services.impl.CacheServiceImpl=INFO,InfoLog
#log4j.logger.org.springframework=ERROR,InfoLog

#log4j.logger.org.springframework.jdbc.support=INFO
#log4j.logger.org.springframework.scheduling=INFO
#定义sql语句的输出级别
#log4j.logger.java.sql.Connection=DEBUG

# Struts OgnlUtil issues unimportant warnings
#log4j.logger.com.opensymphony.xwork2.util.OgnlUtil=ERROR
#log4j.logger.com.opensymphony.xwork2.ognl.OgnlValueStack=ERROR
